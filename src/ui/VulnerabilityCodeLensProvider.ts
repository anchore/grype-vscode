import {
  CodeLensProvider,
  TextDocument,
  CodeLens,
  Range,
  Command,
} from "vscode";
import { IGrypeFinding } from "../IGrypeFinding";

export default class VulnerabilityCodeLensProvider implements CodeLensProvider {
  private readonly results: IGrypeFinding[];
  constructor(results: IGrypeFinding[]) {
    this.results = results;
  }

  public async provideCodeLenses(document: TextDocument): Promise<CodeLens[]> {
    const numVulnerabilities = this.numVulnerabilities(document.fileName);

    if (numVulnerabilities === 0) {
      return [];
    }

    const noun = numVulnerabilities === 1 ? "Vulnerability" : "Vulnerabilities";

    const cmd: Command = {
      command: "extension.openVulnerabilityReport",
      title: `$(alert) ${numVulnerabilities} ${noun} Found`,
    };

    // show at the top of the document
    const location = new Range(0, 0, 0, 0);
    const codeLens = new CodeLens(location, cmd);

    return [codeLens];
  }

  private numVulnerabilities(path: string): number {
    let result = 0;
    this.results.forEach((element: IGrypeFinding) => {
      element.artifact.locations.forEach((location: string) => {
        if (location === path) {
          result++;
        }
      });
    });
    return result;
  }
}
